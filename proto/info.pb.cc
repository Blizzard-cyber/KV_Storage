// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info.proto

#include "info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR SuperBlock::SuperBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.createtime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesize_)*/uint64_t{0u}
  , /*decltype(_impl_.blocksize_)*/uint64_t{0u}
  , /*decltype(_impl_.blocknum_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SuperBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuperBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuperBlockDefaultTypeInternal() {}
  union {
    SuperBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuperBlockDefaultTypeInternal _SuperBlock_default_instance_;
PROTOBUF_CONSTEXPR BlockIndexTable::BlockIndexTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocknumber_)*/uint64_t{0u}
  , /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.freespace_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockIndexTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockIndexTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockIndexTableDefaultTypeInternal() {}
  union {
    BlockIndexTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockIndexTableDefaultTypeInternal _BlockIndexTable_default_instance_;
PROTOBUF_CONSTEXPR FileInfo_KeyBlockMapEntry_DoNotUse::FileInfo_KeyBlockMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FileInfo_KeyBlockMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileInfo_KeyBlockMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileInfo_KeyBlockMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FileInfo_KeyBlockMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileInfo_KeyBlockMapEntry_DoNotUseDefaultTypeInternal _FileInfo_KeyBlockMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FileInfo::FileInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blockindextables_)*/{}
  , /*decltype(_impl_.keyblockmap_)*/{}
  , /*decltype(_impl_.blockusagetable_)*/{}
  , /*decltype(_impl_.superblock_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileInfoDefaultTypeInternal() {}
  union {
    FileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileInfoDefaultTypeInternal _FileInfo_default_instance_;
}  // namespace proto
namespace proto {

// ===================================================================

class SuperBlock::_Internal {
 public:
};

SuperBlock::SuperBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SuperBlock)
}
SuperBlock::SuperBlock(const SuperBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SuperBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.createtime_){}
    , decltype(_impl_.filesize_){}
    , decltype(_impl_.blocksize_){}
    , decltype(_impl_.blocknum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.createtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_createtime().empty()) {
    _this->_impl_.createtime_.Set(from._internal_createtime(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.filesize_, &from._impl_.filesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blocknum_) -
    reinterpret_cast<char*>(&_impl_.filesize_)) + sizeof(_impl_.blocknum_));
  // @@protoc_insertion_point(copy_constructor:proto.SuperBlock)
}

inline void SuperBlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.createtime_){}
    , decltype(_impl_.filesize_){uint64_t{0u}}
    , decltype(_impl_.blocksize_){uint64_t{0u}}
    , decltype(_impl_.blocknum_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.createtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SuperBlock::~SuperBlock() {
  // @@protoc_insertion_point(destructor:proto.SuperBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SuperBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
  _impl_.createtime_.Destroy();
}

void SuperBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SuperBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SuperBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  _impl_.createtime_.ClearToEmpty();
  ::memset(&_impl_.filesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blocknum_) -
      reinterpret_cast<char*>(&_impl_.filesize_)) + sizeof(_impl_.blocknum_));
  _internal_metadata_.Clear<std::string>();
}

const char* SuperBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 fileSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 blockSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.blocksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 blockNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.blocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string createTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_createtime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SuperBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SuperBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fileName = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SuperBlock.fileName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // uint64 fileSize = 2;
  if (this->_internal_filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_filesize(), target);
  }

  // uint64 blockSize = 3;
  if (this->_internal_blocksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_blocksize(), target);
  }

  // int32 blockNum = 4;
  if (this->_internal_blocknum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_blocknum(), target);
  }

  // string createTime = 5;
  if (!this->_internal_createtime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createtime().data(), static_cast<int>(this->_internal_createtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SuperBlock.createTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_createtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SuperBlock)
  return target;
}

size_t SuperBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SuperBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fileName = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string createTime = 5;
  if (!this->_internal_createtime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createtime());
  }

  // uint64 fileSize = 2;
  if (this->_internal_filesize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filesize());
  }

  // uint64 blockSize = 3;
  if (this->_internal_blocksize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_blocksize());
  }

  // int32 blockNum = 4;
  if (this->_internal_blocknum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_blocknum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuperBlock::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SuperBlock*>(
      &from));
}

void SuperBlock::MergeFrom(const SuperBlock& from) {
  SuperBlock* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SuperBlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_createtime().empty()) {
    _this->_internal_set_createtime(from._internal_createtime());
  }
  if (from._internal_filesize() != 0) {
    _this->_internal_set_filesize(from._internal_filesize());
  }
  if (from._internal_blocksize() != 0) {
    _this->_internal_set_blocksize(from._internal_blocksize());
  }
  if (from._internal_blocknum() != 0) {
    _this->_internal_set_blocknum(from._internal_blocknum());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SuperBlock::CopyFrom(const SuperBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SuperBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperBlock::IsInitialized() const {
  return true;
}

void SuperBlock::InternalSwap(SuperBlock* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.createtime_, lhs_arena,
      &other->_impl_.createtime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SuperBlock, _impl_.blocknum_)
      + sizeof(SuperBlock::_impl_.blocknum_)
      - PROTOBUF_FIELD_OFFSET(SuperBlock, _impl_.filesize_)>(
          reinterpret_cast<char*>(&_impl_.filesize_),
          reinterpret_cast<char*>(&other->_impl_.filesize_));
}

std::string SuperBlock::GetTypeName() const {
  return "proto.SuperBlock";
}


// ===================================================================

class BlockIndexTable::_Internal {
 public:
};

BlockIndexTable::BlockIndexTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.BlockIndexTable)
}
BlockIndexTable::BlockIndexTable(const BlockIndexTable& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BlockIndexTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocknumber_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.freespace_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.blocknumber_, &from._impl_.blocknumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.freespace_) -
    reinterpret_cast<char*>(&_impl_.blocknumber_)) + sizeof(_impl_.freespace_));
  // @@protoc_insertion_point(copy_constructor:proto.BlockIndexTable)
}

inline void BlockIndexTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocknumber_){uint64_t{0u}}
    , decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.freespace_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockIndexTable::~BlockIndexTable() {
  // @@protoc_insertion_point(destructor:proto.BlockIndexTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockIndexTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockIndexTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockIndexTable::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BlockIndexTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.blocknumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.freespace_) -
      reinterpret_cast<char*>(&_impl_.blocknumber_)) + sizeof(_impl_.freespace_));
  _internal_metadata_.Clear<std::string>();
}

const char* BlockIndexTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 blockNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 freeSpace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.freespace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockIndexTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BlockIndexTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blockNumber = 1;
  if (this->_internal_blocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_blocknumber(), target);
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  // uint64 freeSpace = 3;
  if (this->_internal_freespace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_freespace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BlockIndexTable)
  return target;
}

size_t BlockIndexTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BlockIndexTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 blockNumber = 1;
  if (this->_internal_blocknumber() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_blocknumber());
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  // uint64 freeSpace = 3;
  if (this->_internal_freespace() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_freespace());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockIndexTable::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BlockIndexTable*>(
      &from));
}

void BlockIndexTable::MergeFrom(const BlockIndexTable& from) {
  BlockIndexTable* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.BlockIndexTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_blocknumber() != 0) {
    _this->_internal_set_blocknumber(from._internal_blocknumber());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_freespace() != 0) {
    _this->_internal_set_freespace(from._internal_freespace());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BlockIndexTable::CopyFrom(const BlockIndexTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BlockIndexTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockIndexTable::IsInitialized() const {
  return true;
}

void BlockIndexTable::InternalSwap(BlockIndexTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockIndexTable, _impl_.freespace_)
      + sizeof(BlockIndexTable::_impl_.freespace_)
      - PROTOBUF_FIELD_OFFSET(BlockIndexTable, _impl_.blocknumber_)>(
          reinterpret_cast<char*>(&_impl_.blocknumber_),
          reinterpret_cast<char*>(&other->_impl_.blocknumber_));
}

std::string BlockIndexTable::GetTypeName() const {
  return "proto.BlockIndexTable";
}


// ===================================================================

FileInfo_KeyBlockMapEntry_DoNotUse::FileInfo_KeyBlockMapEntry_DoNotUse() {}
FileInfo_KeyBlockMapEntry_DoNotUse::FileInfo_KeyBlockMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FileInfo_KeyBlockMapEntry_DoNotUse::MergeFrom(const FileInfo_KeyBlockMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class FileInfo::_Internal {
 public:
  static const ::proto::SuperBlock& superblock(const FileInfo* msg);
};

const ::proto::SuperBlock&
FileInfo::_Internal::superblock(const FileInfo* msg) {
  return *msg->_impl_.superblock_;
}
FileInfo::FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  FileInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blockindextables_){from._impl_.blockindextables_}
    , /*decltype(_impl_.keyblockmap_)*/{}
    , decltype(_impl_.blockusagetable_){from._impl_.blockusagetable_}
    , decltype(_impl_.superblock_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.keyblockmap_.MergeFrom(from._impl_.keyblockmap_);
  if (from._internal_has_superblock()) {
    _this->_impl_.superblock_ = new ::proto::SuperBlock(*from._impl_.superblock_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.FileInfo)
}

inline void FileInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blockindextables_){arena}
    , /*decltype(_impl_.keyblockmap_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.blockusagetable_){arena}
    , decltype(_impl_.superblock_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:proto.FileInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blockindextables_.~RepeatedPtrField();
  _impl_.keyblockmap_.Destruct();
  _impl_.keyblockmap_.~MapFieldLite();
  _impl_.blockusagetable_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.superblock_;
}

void FileInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blockindextables_.Clear();
  _impl_.keyblockmap_.Clear();
  _impl_.blockusagetable_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.superblock_ != nullptr) {
    delete _impl_.superblock_;
  }
  _impl_.superblock_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* FileInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.SuperBlock superBlock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_superblock(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.BlockIndexTable blockIndexTables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blockindextables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, uint64> keyBlockMap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.keyblockmap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bool blockUsageTable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_blockusagetable(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_blockusagetable(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.FileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.SuperBlock superBlock = 1;
  if (this->_internal_has_superblock()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::superblock(this),
        _Internal::superblock(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.BlockIndexTable blockIndexTables = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blockindextables_size()); i < n; i++) {
    const auto& repfield = this->_internal_blockindextables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<int32, uint64> keyBlockMap = 3;
  if (!this->_internal_keyblockmap().empty()) {
    using MapType = ::_pb::Map<int32_t, uint64_t>;
    using WireHelper = FileInfo_KeyBlockMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_keyblockmap();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated bool blockUsageTable = 4;
  if (this->_internal_blockusagetable_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_blockusagetable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FileInfo)
  return target;
}

size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.BlockIndexTable blockIndexTables = 2;
  total_size += 1UL * this->_internal_blockindextables_size();
  for (const auto& msg : this->_impl_.blockindextables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, uint64> keyBlockMap = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_keyblockmap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::const_iterator
      it = this->_internal_keyblockmap().begin();
      it != this->_internal_keyblockmap().end(); ++it) {
    total_size += FileInfo_KeyBlockMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated bool blockUsageTable = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_blockusagetable_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .proto.SuperBlock superBlock = 1;
  if (this->_internal_has_superblock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.superblock_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FileInfo*>(
      &from));
}

void FileInfo::MergeFrom(const FileInfo& from) {
  FileInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.FileInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blockindextables_.MergeFrom(from._impl_.blockindextables_);
  _this->_impl_.keyblockmap_.MergeFrom(from._impl_.keyblockmap_);
  _this->_impl_.blockusagetable_.MergeFrom(from._impl_.blockusagetable_);
  if (from._internal_has_superblock()) {
    _this->_internal_mutable_superblock()->::proto::SuperBlock::MergeFrom(
        from._internal_superblock());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  return true;
}

void FileInfo::InternalSwap(FileInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blockindextables_.InternalSwap(&other->_impl_.blockindextables_);
  _impl_.keyblockmap_.InternalSwap(&other->_impl_.keyblockmap_);
  _impl_.blockusagetable_.InternalSwap(&other->_impl_.blockusagetable_);
  swap(_impl_.superblock_, other->_impl_.superblock_);
}

std::string FileInfo::GetTypeName() const {
  return "proto.FileInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::SuperBlock*
Arena::CreateMaybeMessage< ::proto::SuperBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SuperBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::BlockIndexTable*
Arena::CreateMaybeMessage< ::proto::BlockIndexTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BlockIndexTable >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::FileInfo_KeyBlockMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto::FileInfo_KeyBlockMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FileInfo_KeyBlockMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::FileInfo*
Arena::CreateMaybeMessage< ::proto::FileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FileInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
