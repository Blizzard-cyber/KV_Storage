// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_info_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_info_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_info_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_info_2eproto {
  static const uint32_t offsets[];
};
namespace proto {
class BlockIndexTable;
struct BlockIndexTableDefaultTypeInternal;
extern BlockIndexTableDefaultTypeInternal _BlockIndexTable_default_instance_;
class FileInfo;
struct FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class FileInfo_KeyBlockMapEntry_DoNotUse;
struct FileInfo_KeyBlockMapEntry_DoNotUseDefaultTypeInternal;
extern FileInfo_KeyBlockMapEntry_DoNotUseDefaultTypeInternal _FileInfo_KeyBlockMapEntry_DoNotUse_default_instance_;
class SuperBlock;
struct SuperBlockDefaultTypeInternal;
extern SuperBlockDefaultTypeInternal _SuperBlock_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::BlockIndexTable* Arena::CreateMaybeMessage<::proto::BlockIndexTable>(Arena*);
template<> ::proto::FileInfo* Arena::CreateMaybeMessage<::proto::FileInfo>(Arena*);
template<> ::proto::FileInfo_KeyBlockMapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto::FileInfo_KeyBlockMapEntry_DoNotUse>(Arena*);
template<> ::proto::SuperBlock* Arena::CreateMaybeMessage<::proto::SuperBlock>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class SuperBlock final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.SuperBlock) */ {
 public:
  inline SuperBlock() : SuperBlock(nullptr) {}
  ~SuperBlock() override;
  explicit PROTOBUF_CONSTEXPR SuperBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuperBlock(const SuperBlock& from);
  SuperBlock(SuperBlock&& from) noexcept
    : SuperBlock() {
    *this = ::std::move(from);
  }

  inline SuperBlock& operator=(const SuperBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuperBlock& operator=(SuperBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SuperBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuperBlock* internal_default_instance() {
    return reinterpret_cast<const SuperBlock*>(
               &_SuperBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SuperBlock& a, SuperBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(SuperBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuperBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuperBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuperBlock>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SuperBlock& from);
  void MergeFrom(const SuperBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SuperBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SuperBlock";
  }
  protected:
  explicit SuperBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kCreateTimeFieldNumber = 5,
    kFileSizeFieldNumber = 2,
    kBlockSizeFieldNumber = 3,
    kBlockNumFieldNumber = 4,
  };
  // string fileName = 1;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string createTime = 5;
  void clear_createtime();
  const std::string& createtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createtime();
  PROTOBUF_NODISCARD std::string* release_createtime();
  void set_allocated_createtime(std::string* createtime);
  private:
  const std::string& _internal_createtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createtime(const std::string& value);
  std::string* _internal_mutable_createtime();
  public:

  // uint64 fileSize = 2;
  void clear_filesize();
  uint64_t filesize() const;
  void set_filesize(uint64_t value);
  private:
  uint64_t _internal_filesize() const;
  void _internal_set_filesize(uint64_t value);
  public:

  // uint64 blockSize = 3;
  void clear_blocksize();
  uint64_t blocksize() const;
  void set_blocksize(uint64_t value);
  private:
  uint64_t _internal_blocksize() const;
  void _internal_set_blocksize(uint64_t value);
  public:

  // int32 blockNum = 4;
  void clear_blocknum();
  int32_t blocknum() const;
  void set_blocknum(int32_t value);
  private:
  int32_t _internal_blocknum() const;
  void _internal_set_blocknum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.SuperBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createtime_;
    uint64_t filesize_;
    uint64_t blocksize_;
    int32_t blocknum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_info_2eproto;
};
// -------------------------------------------------------------------

class BlockIndexTable final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.BlockIndexTable) */ {
 public:
  inline BlockIndexTable() : BlockIndexTable(nullptr) {}
  ~BlockIndexTable() override;
  explicit PROTOBUF_CONSTEXPR BlockIndexTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockIndexTable(const BlockIndexTable& from);
  BlockIndexTable(BlockIndexTable&& from) noexcept
    : BlockIndexTable() {
    *this = ::std::move(from);
  }

  inline BlockIndexTable& operator=(const BlockIndexTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockIndexTable& operator=(BlockIndexTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BlockIndexTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockIndexTable* internal_default_instance() {
    return reinterpret_cast<const BlockIndexTable*>(
               &_BlockIndexTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockIndexTable& a, BlockIndexTable& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockIndexTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockIndexTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockIndexTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockIndexTable>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BlockIndexTable& from);
  void MergeFrom(const BlockIndexTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockIndexTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BlockIndexTable";
  }
  protected:
  explicit BlockIndexTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockNumberFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kFreeSpaceFieldNumber = 3,
  };
  // uint64 blockNumber = 1;
  void clear_blocknumber();
  uint64_t blocknumber() const;
  void set_blocknumber(uint64_t value);
  private:
  uint64_t _internal_blocknumber() const;
  void _internal_set_blocknumber(uint64_t value);
  public:

  // uint64 offset = 2;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // uint64 freeSpace = 3;
  void clear_freespace();
  uint64_t freespace() const;
  void set_freespace(uint64_t value);
  private:
  uint64_t _internal_freespace() const;
  void _internal_set_freespace(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.BlockIndexTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t blocknumber_;
    uint64_t offset_;
    uint64_t freespace_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_info_2eproto;
};
// -------------------------------------------------------------------

class FileInfo_KeyBlockMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<FileInfo_KeyBlockMapEntry_DoNotUse, 
    int32_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<FileInfo_KeyBlockMapEntry_DoNotUse, 
    int32_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  FileInfo_KeyBlockMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FileInfo_KeyBlockMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FileInfo_KeyBlockMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FileInfo_KeyBlockMapEntry_DoNotUse& other);
  static const FileInfo_KeyBlockMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FileInfo_KeyBlockMapEntry_DoNotUse*>(&_FileInfo_KeyBlockMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_info_2eproto;
};

// -------------------------------------------------------------------

class FileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {}
  ~FileInfo() override;
  explicit PROTOBUF_CONSTEXPR FileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FileInfo";
  }
  protected:
  explicit FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kBlockIndexTablesFieldNumber = 2,
    kKeyBlockMapFieldNumber = 3,
    kBlockUsageTableFieldNumber = 4,
    kSuperBlockFieldNumber = 1,
  };
  // repeated .proto.BlockIndexTable blockIndexTables = 2;
  int blockindextables_size() const;
  private:
  int _internal_blockindextables_size() const;
  public:
  void clear_blockindextables();
  ::proto::BlockIndexTable* mutable_blockindextables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BlockIndexTable >*
      mutable_blockindextables();
  private:
  const ::proto::BlockIndexTable& _internal_blockindextables(int index) const;
  ::proto::BlockIndexTable* _internal_add_blockindextables();
  public:
  const ::proto::BlockIndexTable& blockindextables(int index) const;
  ::proto::BlockIndexTable* add_blockindextables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BlockIndexTable >&
      blockindextables() const;

  // map<int32, uint64> keyBlockMap = 3;
  int keyblockmap_size() const;
  private:
  int _internal_keyblockmap_size() const;
  public:
  void clear_keyblockmap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
      _internal_keyblockmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
      _internal_mutable_keyblockmap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
      keyblockmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
      mutable_keyblockmap();

  // repeated bool blockUsageTable = 4;
  int blockusagetable_size() const;
  private:
  int _internal_blockusagetable_size() const;
  public:
  void clear_blockusagetable();
  private:
  bool _internal_blockusagetable(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_blockusagetable() const;
  void _internal_add_blockusagetable(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_blockusagetable();
  public:
  bool blockusagetable(int index) const;
  void set_blockusagetable(int index, bool value);
  void add_blockusagetable(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      blockusagetable() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_blockusagetable();

  // .proto.SuperBlock superBlock = 1;
  bool has_superblock() const;
  private:
  bool _internal_has_superblock() const;
  public:
  void clear_superblock();
  const ::proto::SuperBlock& superblock() const;
  PROTOBUF_NODISCARD ::proto::SuperBlock* release_superblock();
  ::proto::SuperBlock* mutable_superblock();
  void set_allocated_superblock(::proto::SuperBlock* superblock);
  private:
  const ::proto::SuperBlock& _internal_superblock() const;
  ::proto::SuperBlock* _internal_mutable_superblock();
  public:
  void unsafe_arena_set_allocated_superblock(
      ::proto::SuperBlock* superblock);
  ::proto::SuperBlock* unsafe_arena_release_superblock();

  // @@protoc_insertion_point(class_scope:proto.FileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BlockIndexTable > blockindextables_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
        FileInfo_KeyBlockMapEntry_DoNotUse,
        int32_t, uint64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> keyblockmap_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > blockusagetable_;
    ::proto::SuperBlock* superblock_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_info_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SuperBlock

// string fileName = 1;
inline void SuperBlock::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& SuperBlock::filename() const {
  // @@protoc_insertion_point(field_get:proto.SuperBlock.fileName)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SuperBlock::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SuperBlock.fileName)
}
inline std::string* SuperBlock::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:proto.SuperBlock.fileName)
  return _s;
}
inline const std::string& SuperBlock::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void SuperBlock::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* SuperBlock::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* SuperBlock::release_filename() {
  // @@protoc_insertion_point(field_release:proto.SuperBlock.fileName)
  return _impl_.filename_.Release();
}
inline void SuperBlock::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SuperBlock.fileName)
}

// uint64 fileSize = 2;
inline void SuperBlock::clear_filesize() {
  _impl_.filesize_ = uint64_t{0u};
}
inline uint64_t SuperBlock::_internal_filesize() const {
  return _impl_.filesize_;
}
inline uint64_t SuperBlock::filesize() const {
  // @@protoc_insertion_point(field_get:proto.SuperBlock.fileSize)
  return _internal_filesize();
}
inline void SuperBlock::_internal_set_filesize(uint64_t value) {
  
  _impl_.filesize_ = value;
}
inline void SuperBlock::set_filesize(uint64_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:proto.SuperBlock.fileSize)
}

// uint64 blockSize = 3;
inline void SuperBlock::clear_blocksize() {
  _impl_.blocksize_ = uint64_t{0u};
}
inline uint64_t SuperBlock::_internal_blocksize() const {
  return _impl_.blocksize_;
}
inline uint64_t SuperBlock::blocksize() const {
  // @@protoc_insertion_point(field_get:proto.SuperBlock.blockSize)
  return _internal_blocksize();
}
inline void SuperBlock::_internal_set_blocksize(uint64_t value) {
  
  _impl_.blocksize_ = value;
}
inline void SuperBlock::set_blocksize(uint64_t value) {
  _internal_set_blocksize(value);
  // @@protoc_insertion_point(field_set:proto.SuperBlock.blockSize)
}

// int32 blockNum = 4;
inline void SuperBlock::clear_blocknum() {
  _impl_.blocknum_ = 0;
}
inline int32_t SuperBlock::_internal_blocknum() const {
  return _impl_.blocknum_;
}
inline int32_t SuperBlock::blocknum() const {
  // @@protoc_insertion_point(field_get:proto.SuperBlock.blockNum)
  return _internal_blocknum();
}
inline void SuperBlock::_internal_set_blocknum(int32_t value) {
  
  _impl_.blocknum_ = value;
}
inline void SuperBlock::set_blocknum(int32_t value) {
  _internal_set_blocknum(value);
  // @@protoc_insertion_point(field_set:proto.SuperBlock.blockNum)
}

// string createTime = 5;
inline void SuperBlock::clear_createtime() {
  _impl_.createtime_.ClearToEmpty();
}
inline const std::string& SuperBlock::createtime() const {
  // @@protoc_insertion_point(field_get:proto.SuperBlock.createTime)
  return _internal_createtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SuperBlock::set_createtime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.createtime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SuperBlock.createTime)
}
inline std::string* SuperBlock::mutable_createtime() {
  std::string* _s = _internal_mutable_createtime();
  // @@protoc_insertion_point(field_mutable:proto.SuperBlock.createTime)
  return _s;
}
inline const std::string& SuperBlock::_internal_createtime() const {
  return _impl_.createtime_.Get();
}
inline void SuperBlock::_internal_set_createtime(const std::string& value) {
  
  _impl_.createtime_.Set(value, GetArenaForAllocation());
}
inline std::string* SuperBlock::_internal_mutable_createtime() {
  
  return _impl_.createtime_.Mutable(GetArenaForAllocation());
}
inline std::string* SuperBlock::release_createtime() {
  // @@protoc_insertion_point(field_release:proto.SuperBlock.createTime)
  return _impl_.createtime_.Release();
}
inline void SuperBlock::set_allocated_createtime(std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  _impl_.createtime_.SetAllocated(createtime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.createtime_.IsDefault()) {
    _impl_.createtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SuperBlock.createTime)
}

// -------------------------------------------------------------------

// BlockIndexTable

// uint64 blockNumber = 1;
inline void BlockIndexTable::clear_blocknumber() {
  _impl_.blocknumber_ = uint64_t{0u};
}
inline uint64_t BlockIndexTable::_internal_blocknumber() const {
  return _impl_.blocknumber_;
}
inline uint64_t BlockIndexTable::blocknumber() const {
  // @@protoc_insertion_point(field_get:proto.BlockIndexTable.blockNumber)
  return _internal_blocknumber();
}
inline void BlockIndexTable::_internal_set_blocknumber(uint64_t value) {
  
  _impl_.blocknumber_ = value;
}
inline void BlockIndexTable::set_blocknumber(uint64_t value) {
  _internal_set_blocknumber(value);
  // @@protoc_insertion_point(field_set:proto.BlockIndexTable.blockNumber)
}

// uint64 offset = 2;
inline void BlockIndexTable::clear_offset() {
  _impl_.offset_ = uint64_t{0u};
}
inline uint64_t BlockIndexTable::_internal_offset() const {
  return _impl_.offset_;
}
inline uint64_t BlockIndexTable::offset() const {
  // @@protoc_insertion_point(field_get:proto.BlockIndexTable.offset)
  return _internal_offset();
}
inline void BlockIndexTable::_internal_set_offset(uint64_t value) {
  
  _impl_.offset_ = value;
}
inline void BlockIndexTable::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:proto.BlockIndexTable.offset)
}

// uint64 freeSpace = 3;
inline void BlockIndexTable::clear_freespace() {
  _impl_.freespace_ = uint64_t{0u};
}
inline uint64_t BlockIndexTable::_internal_freespace() const {
  return _impl_.freespace_;
}
inline uint64_t BlockIndexTable::freespace() const {
  // @@protoc_insertion_point(field_get:proto.BlockIndexTable.freeSpace)
  return _internal_freespace();
}
inline void BlockIndexTable::_internal_set_freespace(uint64_t value) {
  
  _impl_.freespace_ = value;
}
inline void BlockIndexTable::set_freespace(uint64_t value) {
  _internal_set_freespace(value);
  // @@protoc_insertion_point(field_set:proto.BlockIndexTable.freeSpace)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FileInfo

// .proto.SuperBlock superBlock = 1;
inline bool FileInfo::_internal_has_superblock() const {
  return this != internal_default_instance() && _impl_.superblock_ != nullptr;
}
inline bool FileInfo::has_superblock() const {
  return _internal_has_superblock();
}
inline void FileInfo::clear_superblock() {
  if (GetArenaForAllocation() == nullptr && _impl_.superblock_ != nullptr) {
    delete _impl_.superblock_;
  }
  _impl_.superblock_ = nullptr;
}
inline const ::proto::SuperBlock& FileInfo::_internal_superblock() const {
  const ::proto::SuperBlock* p = _impl_.superblock_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SuperBlock&>(
      ::proto::_SuperBlock_default_instance_);
}
inline const ::proto::SuperBlock& FileInfo::superblock() const {
  // @@protoc_insertion_point(field_get:proto.FileInfo.superBlock)
  return _internal_superblock();
}
inline void FileInfo::unsafe_arena_set_allocated_superblock(
    ::proto::SuperBlock* superblock) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.superblock_);
  }
  _impl_.superblock_ = superblock;
  if (superblock) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FileInfo.superBlock)
}
inline ::proto::SuperBlock* FileInfo::release_superblock() {
  
  ::proto::SuperBlock* temp = _impl_.superblock_;
  _impl_.superblock_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SuperBlock* FileInfo::unsafe_arena_release_superblock() {
  // @@protoc_insertion_point(field_release:proto.FileInfo.superBlock)
  
  ::proto::SuperBlock* temp = _impl_.superblock_;
  _impl_.superblock_ = nullptr;
  return temp;
}
inline ::proto::SuperBlock* FileInfo::_internal_mutable_superblock() {
  
  if (_impl_.superblock_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SuperBlock>(GetArenaForAllocation());
    _impl_.superblock_ = p;
  }
  return _impl_.superblock_;
}
inline ::proto::SuperBlock* FileInfo::mutable_superblock() {
  ::proto::SuperBlock* _msg = _internal_mutable_superblock();
  // @@protoc_insertion_point(field_mutable:proto.FileInfo.superBlock)
  return _msg;
}
inline void FileInfo::set_allocated_superblock(::proto::SuperBlock* superblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.superblock_;
  }
  if (superblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(superblock);
    if (message_arena != submessage_arena) {
      superblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, superblock, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.superblock_ = superblock;
  // @@protoc_insertion_point(field_set_allocated:proto.FileInfo.superBlock)
}

// repeated .proto.BlockIndexTable blockIndexTables = 2;
inline int FileInfo::_internal_blockindextables_size() const {
  return _impl_.blockindextables_.size();
}
inline int FileInfo::blockindextables_size() const {
  return _internal_blockindextables_size();
}
inline void FileInfo::clear_blockindextables() {
  _impl_.blockindextables_.Clear();
}
inline ::proto::BlockIndexTable* FileInfo::mutable_blockindextables(int index) {
  // @@protoc_insertion_point(field_mutable:proto.FileInfo.blockIndexTables)
  return _impl_.blockindextables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BlockIndexTable >*
FileInfo::mutable_blockindextables() {
  // @@protoc_insertion_point(field_mutable_list:proto.FileInfo.blockIndexTables)
  return &_impl_.blockindextables_;
}
inline const ::proto::BlockIndexTable& FileInfo::_internal_blockindextables(int index) const {
  return _impl_.blockindextables_.Get(index);
}
inline const ::proto::BlockIndexTable& FileInfo::blockindextables(int index) const {
  // @@protoc_insertion_point(field_get:proto.FileInfo.blockIndexTables)
  return _internal_blockindextables(index);
}
inline ::proto::BlockIndexTable* FileInfo::_internal_add_blockindextables() {
  return _impl_.blockindextables_.Add();
}
inline ::proto::BlockIndexTable* FileInfo::add_blockindextables() {
  ::proto::BlockIndexTable* _add = _internal_add_blockindextables();
  // @@protoc_insertion_point(field_add:proto.FileInfo.blockIndexTables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BlockIndexTable >&
FileInfo::blockindextables() const {
  // @@protoc_insertion_point(field_list:proto.FileInfo.blockIndexTables)
  return _impl_.blockindextables_;
}

// map<int32, uint64> keyBlockMap = 3;
inline int FileInfo::_internal_keyblockmap_size() const {
  return _impl_.keyblockmap_.size();
}
inline int FileInfo::keyblockmap_size() const {
  return _internal_keyblockmap_size();
}
inline void FileInfo::clear_keyblockmap() {
  _impl_.keyblockmap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
FileInfo::_internal_keyblockmap() const {
  return _impl_.keyblockmap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
FileInfo::keyblockmap() const {
  // @@protoc_insertion_point(field_map:proto.FileInfo.keyBlockMap)
  return _internal_keyblockmap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
FileInfo::_internal_mutable_keyblockmap() {
  return _impl_.keyblockmap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
FileInfo::mutable_keyblockmap() {
  // @@protoc_insertion_point(field_mutable_map:proto.FileInfo.keyBlockMap)
  return _internal_mutable_keyblockmap();
}

// repeated bool blockUsageTable = 4;
inline int FileInfo::_internal_blockusagetable_size() const {
  return _impl_.blockusagetable_.size();
}
inline int FileInfo::blockusagetable_size() const {
  return _internal_blockusagetable_size();
}
inline void FileInfo::clear_blockusagetable() {
  _impl_.blockusagetable_.Clear();
}
inline bool FileInfo::_internal_blockusagetable(int index) const {
  return _impl_.blockusagetable_.Get(index);
}
inline bool FileInfo::blockusagetable(int index) const {
  // @@protoc_insertion_point(field_get:proto.FileInfo.blockUsageTable)
  return _internal_blockusagetable(index);
}
inline void FileInfo::set_blockusagetable(int index, bool value) {
  _impl_.blockusagetable_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.FileInfo.blockUsageTable)
}
inline void FileInfo::_internal_add_blockusagetable(bool value) {
  _impl_.blockusagetable_.Add(value);
}
inline void FileInfo::add_blockusagetable(bool value) {
  _internal_add_blockusagetable(value);
  // @@protoc_insertion_point(field_add:proto.FileInfo.blockUsageTable)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
FileInfo::_internal_blockusagetable() const {
  return _impl_.blockusagetable_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
FileInfo::blockusagetable() const {
  // @@protoc_insertion_point(field_list:proto.FileInfo.blockUsageTable)
  return _internal_blockusagetable();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
FileInfo::_internal_mutable_blockusagetable() {
  return &_impl_.blockusagetable_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
FileInfo::mutable_blockusagetable() {
  // @@protoc_insertion_point(field_mutable_list:proto.FileInfo.blockUsageTable)
  return _internal_mutable_blockusagetable();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_info_2eproto
